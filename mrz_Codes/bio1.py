import random
import numpy as np

DNA = ''.join([random.choice('ATCG') for _ in range(10000)])
# DNA = 'CTCAGTGC'


def cgContents():
    C=0
    for base in DNA:
        if (base is 'C') or (base is 'G'):
            C+=1
            # print(base)
    return C/len(DNA)

    # C = [base for base in DNA if base in 'GC']
    # return len(C)/len(DNA)


def reverseComplement():

    complement = {'A':'T', 'T':'A', 'C':'G', 'G':'C'}
    rc = ''
    for base in DNA:
        rc = complement[base] + rc
    return ''.join(rc)


def hammingDistance(dna1, dna2):
    C=0
    for base1, base2 in zip(dna1, dna2):
        if base1 is not base2: C+=1
    return C


def hamming(dna1, dna2):
    return len([(x,y) for x,y in zip(dna1,dna2) if x is not y])


from collections import defaultdict, Counter


def motifs1():
    k=5
    kmers = defaultdict(int)
    for i in range((len(DNA)-k)+1):
        motif = DNA[i:i+k]
        if not motif in kmers:
            kmers[motif] = 1
        else:
            kmers[motif] += 1

    # kmers=sorted(kmers.items(), key=lambda x:x[1], reverse=True)
    # kmers=sorted(kmers.items(), key=operator.i)
    return kmers[:5]


def motifs2():
    k=5
    motifs = Counter([DNA[i:i+k] for i in range(len(DNA)-k+1)])

    print(motifs.most_common(5))

# print('{0:0.4f}'.format(cgContents()))
# print(DNA)
# print(reverseComplement())

# print(hammingDistance('GAGCCTACTAACGGGAT', 'CATCGTAATGACGGCCT'))
# print(hamming('GAGCCTACTAACGGGAT', 'CATCGTAATGACGGCCT'))


# motifs1()
# motifs2()


def fibonacci(n):

    a,b=1,1
    for i in range(n):
       b,a = a, a+b
    return b



# print(fibonacci(150))

DNA =
'AACTTCTCGGATGAAGAACTGCTTCGTCATCTCTAACGACGGGATGCCCTCTACTAGGAAAGTCTCCGAGCACACTCAGAGTATAATATTTCATACCACGGGACGCGCCCGATTAGTGTGCCCAATGGGGGCTCTCACTCATATAAGTTAGAGATGTTCCCAAAATCTATAACCGCCAAGAGTAATTTACCCGCAGGCTAAAAAATAAGGAGCGAGTAAAGCGGGTTAAATATACCGGGCGTACAGCATCTTAAAATTAGGAGGTTCAGACGACGTGTGGCAGAGCTGATTGGGGTGCGTTCACTTTTTGACCTTTTCATTTAAACTGCAGACTCTAGACGGGCGAATTACTTCCAGCCCAGCGACGTACTTCTCACACTACGGATACTTACTGGAGCATCGGCGATCGAAGTCCCAGAGGGGCCTTCAAATTGGCTTGTCTAGTTACCCCATAGGTCGTCGTGCAGGGCATAGTAACAGGCCAGCACACTACGGCCAGTATTATATATACACAGCAAGCAAGTGGCAATCTGACTAAACTGTAAGTGCACACGGGCATAGGTGTTCACGAGAAGAGCGAAGGTACAACCCCAGAATCTGGCCCCCAGCCGAAGGTTTTCGGCCCGTCAACTTCCCCGAAAGTATCTCCGGGCGGGGAGAGCCCGTAACTCTCATGACGCAATAAGTTTCCTTGTTCGCAACGGCTACCGCTTACGTATAAGGTGGGACGGTTTGTTTTCACGGAGCACGTTAAAGTTACCGTCGAGATGGTCGCTATACGACCAAGCGGTGTCTACCGCCAGCCGATTCCTTAGCGCTGTGAATGTTCCGCGTATGCTAATTCTGCAAGCTTCCCCTAGGCTGCACGCTGACTCATAGCCTCACGCCGGGAATGCCTCGCGAGGTATAGAAAGGGCGTTAGTTTTCGCTCGCATGTGC'

from skbio import DNA
from Bio import motifs

def DNAtoRNA(DNA):
    complement = {'T':'U'}

    RNA = ''
    for base in DNA:
        if base is 'T':
           RNA += complement[base]
        else:
            RNA += base

    return RNA


import time


def longestCommonPrefixes(S1, S2):
    i = 0
    while i < len(S1) and i < len(S2) and S1[i] == S2[i]:
        i += 1
    return S1[:i]


def init(d, begin):

    for key, value in d.items():
        if key[0] == begin and key[1] == begin:
            return value



def hmm():
    transition = { 'R -> R':0.5, 'R -> S':0.5, 'S -> S':0.7, 'S -> R':0.3 }

    # print(transition[('R','R')])

    p = np.empty((100,2))
    p.fill(-1)

    p[1, 0] = 2/3 #transition['S -> S']
    p[1, 1] = 1.0 - p[1, 0]

    i=2
    while i<100:
        p[i, 0] = p[i-1, 0]*transition['R -> R'] + p[i-1, 1]*transition[('S -> R')]
        p[i, 1] = 1.0 - p[i, 0]
        i = i+1

    print(p)


def countingDNA():
    # dna = 'atcggcatacg'.upper()
    # return C;

    # for _ in range(int(input())):
    #     dna = input().upper()
    #     C = {'A': 0, 'T': 0, 'C': 0, 'G': 0}
    #     for i in dna:
    #         C[i] += 1
    #     print("{}-{}-{}-{}".format(C['A'], C['T'], C['C'], C['G']))

    C = { chr(i+97):0 for i in range(26)}

    str = 'rafsanjani'

    for i in str:
        C[i] += 1

    for key, value in C.items():
        if value>0:
            print(key, value)


# def rosalind():
#
#     DNA = 'CCAGCACCTTATCCATCTTTCTGAGTCTGTGGCGTATAGGTGCTTTGCAGTGTCCTACCAAGATCTGCTATCGTCCATAACGTCTGTGACATAGCGTCTGGCTGATTAGTTCTTTTAACGCCACTGCAAGGGGTGAAAGGCACATCAGGCGCGATGCGGCCCTGCTCCACTTTCCCAACGTTTGGGGAACAAATGTCACTGTCAACCCTGCGAAGGACGTCCCACGTCTCCCAACTTTCACATGCCACCCACGTTTTGCGTTAAGATCCCAATCGTAGGTCTCCCGACGGATGCATATAAAGCGGGCACCTTTTGCGTGTTGTAACCGGGTGTGATGGTGGGTCTGGGCGCAGCCTCGAGGAGCCGATTAAGATCCCGAGGCACAAGCTTTCTTCTCTACCCATTCCTCTGTCTTAGGTAGGCCTTTAGGCCCCTGTTACCGAGTTGTCCTATAAGTGGACGATGAGATTCCTGCGTTTGCGAGGGGTTCGTTCATCATGTCACCCCTTCTTGGATCCGAGGGCGCCTATTAGAGCGCTACACTTACGCAAGAGTTCTAGTCGACCCGCACGCAACCACCGTGCTACTTCACTCCCAACCGGCCCTCCACGGGCGTCTTCGGAGAGTTTAAGTAGCGCCAAGCAGGTACATGGCCTGGTGGCAGCAGAAGATACAGTAAAAGATAGGGGTAGACACGCCGTATTAATATCGGGAGACTGCGTAATAGTGCGCTAAGCTCCAACTCCAAGAGACACAACGCTGTTGTGTTTTGCTGTCATTGATGATTACCCCTCGGTGAGGTACTGACAGACGCTGAGCCGTCTGCTCTGAGGGCCAGAATTCCTCCGA'[::-1]
#
#     d = {'A':'T', 'T':'A', 'C':'G', 'G':'C'}
#
#     emptyDNA = ''
#     for base in DNA:
#         emptyDNA += d[base]
#
#     print(emptyDNA)

c = [-1 for i in range(0,105)]
# c[1] = 1
# c[2] = 1

def fiboRec(n):
    if c[n] != -1: return c[n]
    else:
        if n==1 or n==2: return 1
        else:
            c[n] = fiboRec(n-1) + fiboRec(n-2)
            return c[n]
            # return c[n]


def sequences():
    step1 = 'ATCG'
    step2 = 'ATCG'
    step3 = 'ATCG'

    seq = [ (i+j+k) for i in step1 for j in step2 for k in step3 ]

    print(seq)
    print(len(seq))

def work(model):
    S = 'abba'.upper()

    result = 0.5
    for one, two in zip(S, S[1:]):
        result *= model[(one, two)]

    print(result)


def states():
    S = 'aabbbaba'.upper()

    C = { ('A','A'):0, ('A','B'):0, ('B','B'):0, ('B','A'):0 }
    model = { ('A','A'):0, ('A','B'):0, ('B','B'):0, ('B','A'):0 }

    for one, two in zip(S, S[1:]):
        C[(one, two)] += 1

    # print( C[('A', 'A')] + C[('A', 'B')] )

    model[('A','A')] = (C[('A', 'A')] + 1) / (C[('A', 'A')] + C[('A', 'B')] + 2)
    model[('A','B')] = (C[('A', 'B')] + 1) / (C[('A', 'A')] + C[('A', 'B')] + 2)

    model[('B', 'B')] = (C[('B', 'B')] + 1) / (C[('B', 'B')] + C[('B', 'A')] + 2)
    model[('B', 'A')] = (C[('B', 'A')] + 1) / (C[('B', 'B')] + C[('B', 'A')] + 2)

    work(model)


def hammingD():
    dna1 = 'TTCGAACGTTTAACGAATTTAAGTTCACCATAGGTCCACGCTCTTGACCAAATTCGCTATGTACCCAGGCATGACAGCGGCGCGAGTTTAAACAGGGTAACGTTGGGGATTGGACTGATTCGGGTATAGGTCCTCCGTTTCTGCTGTCATAGCGGACACGCAATATTAAGCGAAACTCCGTGTCGTGAGACACATCGCGACAAACAGACAGGAATATCCGGCCTGCCCAGCTATAGAAATCGGTGTGTTTTATCAGGCACCGGGACCATCTCCTACCTAATTGCTTTGACTTGGCCCATCCGTGAATCCGCCGCACTAGCCCTGCTGCACTCTGCTAAAAATACGTTCACATCTGTCAACGACAACACCTTACGGAACGGGCCAAGACTACGAAAACAGCCGAAAGTCTTGCGGTCGTAGGGTATGGGCGTCTCTTCTTCGGGGGCCCACATGAAATCCAGATGCCAAATCACCGTTAGTCTACCCTACAAATAGTATGGATCACGACTTATGCTCATGTCAAGCAATGGCACTCATTCGACGTGTACAACTCCGTGTCATCTCTAAGCAGCATATTGCATGCCTGTCCTCGCTATAACTACGCTCTGCAGAGCGTGTTTCGACCTGCTGGAAAGTGCTAGTAGTGGTAACTCTGGGCTAGCGCGGATTGCTCTTACGTTTCGCTGTAGAGTTGCCTTAGTTATGCATGCTTGACTCAGCTTCAAACCGTACTCGCCCCTTTATTCTTGATTCCTACAAGGTTGACAGCGCGGCATTTGGTATCGTATTACTCGCGCATACCTGGTCAGAGTAGTCCCCATCCTGGTAACGGCGAGCTCATCGCTAGGCTTGTGAAATATCCGCCACATGAGTCCGGTTTGACGGTTCCTTGAACCTTTTATACGGGGGCAACCTCGTGTTCTATTTCAGGTGGGAGTTGGAGGGCAAGGCTTCCCTACCAAAGTTCTTCACGCATTTTGGCTAGACATCGAA'
    dna2 = 'AGTCACTCAACCATGTATTGACGTACCACTTATGTCCTTTGTGGATTTTGAGTCCGCTATTTATCTCCAGATCCATGGTGCTAGCATTGTGACAGAATACCGCAAATGATGGGACGGTGTACAAGTATAGTCCCCCGTGTATAGTCGAGTTGAGGAGTATAAGAGATCCGCGGAGCTCCGTTGCGTCATACATGTAGCATCAGTCACGGAGTATTAATGAGCCATCCTAGAGATTGATTACGGGTCGGTTTAGCTTACAAAGCAAACGTTCCGTTACGGACGGCTATGCGATGCCTTGTAGAGGAATGCGATACATTAGCTTTTACATCGGCTGGTATCGTTTCGTCTACCTCTCTGCATCGCAACACCTCATGGAACCTTATTAGAGTACAAAAAGGGACCTTGACGTTGCACTTGATTACTATTCGAATCTCATCTACTCTGACCTGGAGGCAAAGCACATGGAGACCTGCAGTGTACGTAAGCACCAGCGAGTACGTAGCATGATCCGCGTTCAAGCAAAGCGAACACCATCATTAAGAGAGTCCAAGATCTAATGTGCCGGAAGTTAGGTATTCTAAGACTGACCAGGCTATAGCAATGGCCTGTCAAGCCCTATCCAAACTGGATTGAAGTGCTTCGGAGTGGAACAGTGGTACACCTCCAGTTCACACTACGGATGGCCGTCAAGTTGCAAAATCCAAGCGTGCACGATAACGTTGCAAGGGGTCGTTCCCCCTAGGTGTACTATCCAAACTACTGATTAGGGGCGGAACTTAGTCTCGGATTGATTAGGCCTTGTTGGTGAGGTGAGTAAACTGACTCCTCTCGTCTAGATCGGGGATAGGAGGGGGCTCAAGACTACGCAGATGTAAAATGTGAACGTTCTTCGGAGCTTGTCTATGGTCATGCCAAGCCGTCCAGTTCAACATGACATACTGGAGTCATAATGCTGCCTCCCAAGTTCGCCACCGCCTTGGATTGTAATACATG'

    C=0
    for base1, base2 in zip(dna1, dna2):
        if base1 is not base2: C += 1

    print(C)

def mRNAtoProtein():
    table = {
        'UUU': 'F', 'CUU': 'L', 'AUU': 'I', 'GUU': 'V',
        'UUC': 'F', 'CUC': 'L', 'AUC': 'I', 'GUC': 'V',
        'UUA': 'L', 'CUA': 'L', 'AUA': 'I', 'GUA': 'V',
        'UUG': 'L', 'CUG': 'L', 'AUG': 'M', 'GUG': 'V',
        'UCU': 'S', 'CCU': 'P', 'ACU': 'T', 'GCU': 'A',
        'UCC': 'S', 'CCC': 'P', 'ACC': 'T', 'GCC': 'A',
        'UCA': 'S', 'CCA': 'P', 'ACA': 'T', 'GCA': 'A',
        'UCG': 'S', 'CCG': 'P', 'ACG': 'T', 'GCG': 'A',
        'UAU': 'Y', 'CAU': 'H', 'AAU': 'N', 'GAU': 'D',
        'UAC': 'Y', 'CAC': 'H', 'AAC': 'N', 'GAC': 'D',
        'UAA': '---', 'CAA': 'Q', 'AAA': 'K', 'GAA': 'E',
        'UAG': '---', 'CAG': 'Q', 'AAG': 'K', 'GAG': 'E',
        'UGU': 'C', 'CGU': 'R', 'AGU': 'S', 'GGU': 'G',
        'UGC': 'C', 'CGC': 'R', 'AGC': 'S', 'GGC': 'G',
        'UGA': '---', 'CGA': 'R', 'AGA': 'R', 'GGA': 'G',
        'UGG': 'W', 'CGG': 'R', 'AGG': 'R', 'GGG': 'G'
    }



    mRNA = 'AUGCACCUCAGCCUUUGGCGGAUGACCCUGCAAACUGAAAUUCCGGUACAGAACCCUGUAUUGGUCUGGAUAUCGGUCUUAGAGAAGCGAGUAAAGUAUAUAAUUUUCCCUCUCGGGUGUAUCGGCCAUAGGAGAGGCGUUCACUAUCGCCUGGACUUUAGUCUGUCACGUUCGCGCUCUACUUAUUUGGUUUUAAUUCCCACAUUAAUGAUUUGUGGACUAACUACGCUUAUGCACUGGGUACAAGUUCCUUUAACUUCAAGUUCGUGGGCGUUGCGCGGCUCCGGCGAGUUCGCACUGUCGUUUAGUUGCUCCUGGACUCUCAGACGUGUCAAUGCGGCCUACGCCAUCGACAUUAAAUUGGCAGCACUCAGGUUCGACGGAGAAUGUCCGCGUAGUCAAAGCGACAGCCGGUCCGGUGAAAACGCUAUCUUCAGCCCAGUACCCCGUCUUUAUUGGCGGAAGUUAUACCUGAUGUCCACCCUUAAUUCUACUGCCGACUGUAUCAUUCGGCAUAGCCGCAUCAUGAUCGAGCCUAGCCCUACUCGUAUAAGAUGUUGGACCUGUAACGCUACGAACGUGGGUACAGAAGCCCUUUCGCGGGUGUAUUUUCAAACUAGACAGGACACUCACAUCCUUAUUUGUUGGCAAGGGGGAGGGCCACCUUCCAUGUCGGCUGUAGACCGUAAUGCGCUUUUGAAAGGGAAGAUACCAUGUCUUUCAGGAAAGGAAGGUUCCCCCGCCCAAAUAAAUUGUGGGAGUUCCCCCGUUGUGCUAAAGACUAUGCGAAAUCCUGGAGCCACGUACAAGACGACACACUGUUUCAGUGCUACACGGUGUUCCUUAAACUAUCUGUAUUUACUACAAUACCAACCCCGGGCAUUUGAGCGGAAAGCUCAGCAAAUCAGCCUUCAGCAUUUGAUGGCCUACCUAGGAACCCUCCGUGGCAGGCAAAGGACGUGGGCCCAUGGAGGCCUGAUUAAUUUCAGGAACAUCAAUAGCAUAAGAGGUAGCGUCUCCCAGCAACCCAAAAUUCUAUUGAGGUAUCUGUGGCUCUGCACGACAGGAGUGCGCCGGCCUGUACCAUGUGAGGCGUACCUCCCCGGCACGCCAGUGGCUUCAUUACGAAUACUGCACGCACGGUCUAAGUUUUUUCAGAGUAUAAUGUCUGCGAGGCUAUUGCGUCUGUACAUCAAUGUGGGUACCCCUUUACCCGCCGAACUGACCGUCCAUCCCUUUACUAUGCCUCACCGUUCUGCUGAAGAACUUGUGCCUGUGCUGCAAGGCCUAUCGCUUGAAGGACAAACGGCCUUCCGGUCUGAGCAUCCAUGCUGUUGUGCAGGUGACUCACCUAGGCAAUGGAGGUUUGGUAUUUUUUUGCGUAUCAAUACCUUAACCCGGGCGCGCAUCAGUUUUUAUGUUACUCGGUACGCAGUCAGGUGUUGCCUAUCUCCUCAGGUCCCCGUACGGAUACAUCAGAGAAACUACCCCGCAAUACCCCAUUUAACCUCAUUGCAGCCAUAUGUAACGACUUCGCAAGGGUUCGAGUACAGUGGACUCAAGCUGCACCAGACGGUCCGCCUGUUAACAAUAUUAUACAGUUUAAUUAUGUGCCCAUUCGUGAAGACAUACACCCCAACAACCGGGACUAUGCUGCAACUUCACGCGUGCUUGGCGACCUACAUUCGUAUUCUGACGUCCUUCAGGGUUAAGGUCCUCCACACCCGAGACCGGAGAACUUAUCUUUGUCGCCCGUUUCGCGGGAUAACUAAGAGCCACGGGGGCUCUUUCACGAGAGUUGUCGUGCUGUGGGUCAGAGGUGAGAGAGAUUGGAUCAAGUAUCUAGAUACCCCUAAAAAAGCCAAGGUCUUGUUACUGGAUGGUCUAUGCUUUGCACUGGCUCUCUCCUAUGGGCCCGGUCGCUCGGCCGCAGACGGGUCCCGAUUCGUACACUUACGCUCAUUGGGGGAGGUCUCUAAAUUGAUUGUACGCUUUAAGAUAGUCCAUGUUAUUAUGAUCAUAGAUAGGAUCAAUCAGGGCGGAUACCCUGGUCGUCGUAAAGUCUGCAAGAUCAGGGGUCGUCAAAGGUCGUUUAUCGGGUGUGCGGCCGGUAUUAUCCCUGAGUUCAACGGUCCCACUUUGUACAUGUUGAUAACGGGAAAAGGGCGUCCGCUACACAUCUCUAUACAGCCCCCCCGGUUCGGAAUAGUCACUAAGCCUUUCAAGACGACACAAAAUCAACGUCAGACGGCGUGGGCGCGUAGGUUGAUAACCUUAGAGAGAUUUUGUCUUGGCACCAACGAAGGCUGCAACCCUCAUAUCAGUAAGCCUUUGUCCGUACUAGAGAUGCGCAGGACCGAACAAACUAGCAACCCGUCAUCCUCAAGAGCUGUCCAUUAUAAGGGAUGGGGGCCAAAAUCAGUUCAUUCCAAAAGUUGUGAUGAUCCUUGGCAGUACUGGGCUUCUAACUUGAGCACAAAGAUGGGAGACCAAGCGGAGACCCAAUUAUCGAUCAAAAGCUGUUCAGAUUGUGGUUGUACUUACGGUGUUAACCCCCAGGUGCGCCUCAACGAGAACUCGGUGGAACCAGGUUGUUCGCCGCCCUCUCACCUACGGCCCUGGCCGUUGGAUCACCGUUCCAUGACGCCGGCCCGGUCGGUAUUCUCCGCCAAGAGUCUAGAGCGUCAAUUCCACUUUGGUGAUGCAUUCCUAACGGAGGCACAUGUCUACGCAGUGGGGACUCCACAUAAUAACGUUCGCCCUUGGUCUCGGAAGAGUUUCGGUGCGGGAGAGCGCCUCGUAAGCGUAACUGUAAUCUGCUCAUCGGGUCCAGGCUUGACGACAAUAUGCAGACUCCGUUGCCCUGGUCUUGACCGUUACUUUGCGACUCAAUCCAGAUCUCGCGCGCCAUCUGUUAAGGCGGGAGAGGCCAGCAGCCGGCAUUCAUCGCCACCGUUUAGUUACCUCAUCUCAUCGACGCUUGCCCACAGGGGCCAUUGCUGCGAAUCCAAAAAAAUGCGGCGGCCAACGGACUACGAGGUCAAGUCAAAGCAUUCCCUUGAUGGUGAGCAAGUUUUAGUGACUGUGAGCUCCUGUGCUGCAGAUAGACAGGCGGUUCGUUCCGCUCUCGACCCGACUCUACAAAACUGGCGUCCCCAUCGGCAGCGUCUAAGUUGUCAUCAGGGACCUUUCACAAGACAGUUGCCGUGUAAUUCUCGCCCAAGUCGCGUGCCCACGCAGUGGUGUUUCUUUAAGCCAGUAUGGCAUGGACGGAUCGACCCCGCUGGACUCGCAACAGCGGAUUCCCGUUACCUACAUCGAAGUCUUAGUUGGAUAAAGGGGCAAACGGUAGGUGCGGGGUUGGGUAGAAAUCUCAUUUUAACAGUACAUUUAUCCGUGUACUUGUGCAUGUGCCGGUUAUCUCUUGCUCCUAAUCGCCAGGAAAGUCGCGGUUUCUUCAGUGUAGCCAAGCUUUUUCACCCUGCGGUGGUGAGAAACCGACCCUCUGGCAUCAGAAGUCAAGUGCCCCUCGUUUUCCCAGGGGAUAGGUCCACCGUGAUUGCUUCUCGAGCUACUAAGAUUCCGUUAAGCUUCAGUAACGCUCUGUAUGGGGGGAUCAGCCAAUAUCCUGCCAGUGCAAGACAAAUUCUGUGGUCAGCCAAGCUCGCGCCAAGACGUAAGCUCGUAACCAUCAGUUACGGAGGUUCCCUAGCCCGGUCCGUUCGAGUGCGCCCCCGCAGUUAUUCGACACCUAUCCCUCUACAGCCAACUCCUAUAGGAGUCUACUGCUGUCAUAGUCGUUGCCGAUUAUCUCACACACGCUGCGUUUCAUUAUGCCCUAUCAACAUGAUCCGUAUAGACUGUCAGCAGCUUAACCUACGAAUCAGUCGAAUACGGCACAACGCUGGUAUAGAAAGUUUUCGUUUGAUGGCGUACGGCGAGUGUGACCCUAGGCAGCAUCUCUACGUCUGCAGCAGUUACACACGCGUACCGACAAGAGUAACAGGCGACUACCCCGAAUUAGGCGCCGGUGCCCACGAAAUGGGCCCUUCAGAGCACUUUCGCUCUCCGGCAGAAUUAUUUGAAAAGUCAGUCGUCGGACUUCUAUCUCCUUACAUCGUAAGGGAGCGUUUUAAUGUGACGGACGAUGGUGAACCUGGUAGGAUCGGGACCAAAACCGGCCCGGUGAACGGCGCCACUGCGUCUCGAACCCCGUUAUCAGACUAUGCAAAAUAUAUAGUGGAAGGCAUCCCGGGAGGCUUUAAAAAACCCUUCAUUUUCGACACACCGGUCGGGGAAAUUUACGGUUACCUCUCCCAUAUCAAGACCACUUUAAUGAGCAAGCUUAGUGUCGCGGGGUCCACCCUAUUUACGGUCUAUAAAGCAAAGCCUGAGGCUAUAAGACUGUCUAAGAUUUUAUUCGCGGAUUUGGGCCUCAGGGAGCGCACUUUAUUUAGUCGGCGGUUAUUGUCAAUGCGCCGAUCAUGCACUACUUUACCCCAUCUGGAACAAGCGUUUCUGGGAUCAGUAUGCUAUGUCCGGGUUCCUCCAGAGUGGCGCACUAAGUCUGAAGAUCUCCGCCGCGAGAGUCGAUUGAUGACACUCAUGUUGUCCAGACCUACUGGCGGGUGGUACUCGCGAUUGGUGGUGGAACGGGUCGUAAUGGCUCAUCUCACCAGGUGCCGGGGUCUUCGAUAUUCUGGGAUUUUGCAGCGUUCGAUACCUAGUUUUAUUUCCGGCAGACGUAAUGGGCAUUUAAUCGGCCAAAAAUCAGGUCGGGGCAGGUGGUAUUGUCGUUUAAGGAGGCCUCGCGUUCGAACGAACAGGGUCCUGAACCCCAUGUCUCUUGUCUCGCAAACGAUUGCCAGACCUUAUGAACGGGUACCUGUCGGUUGCUUGAGCGCUGACCUAUUGAGAUAUACGAACAUCGACUUUAUUAAGGUAAGGGGCGAAAACCUAGGGACAGGUGAAAAAAAAUCUUUAGAGUCUCAUGCGGGGUGGAUGGACAGCCGUUAUGGGCGCUCAGGAUCUGCACAGAUGAGGGCGGGGAACAGCGUUGUGCCUGUCCACGGUUCCGCCACCCGUUUAAGACUGGUCGAGAUGCCUAGUAGCAGCGGCCCAAGUUUUACUUAUGUAGAACCAGGCAGAUUUUUCUACUGCGCCAUCUGCCUUGUAAGUUCUAGGUUGGCCUCGUAUGAGAGACCCUUAAGCUUUAGGUAUUCGCUACCCGGUCAGAGAUUUCCCGAACUGCACCCUCACCGGAUUGAAGGAUGGACGAUACAUUAUUUAACAGCCGGAAAACUAUAUGCAUAUAGAGAACUACCUCCCAGCAGGCUGACAUGGGUGCCGUCGAGUGAGGCCUCGCCGAAGCUGCGUUGGCAGCAGCCCUUAGACACGUCUCAAAGCUAUCCUGACGAAGAUCUUGUACCGUAUGCCGGAUACCGGCGGACAGCCUUUCGAUUUCACAUAAAAGACCUCAGCGCCAAGUGCAUCAUCAUCAAAGGGUGGUCUCGUCAUACGGACUGUCCGUUGCUUAUCAUUGCAUUUCACGUGGUGUGGAUAGUUGAAAGCUGCAUCUGUAGAGGCUUUAGCGGUCUAUGUCAUUUUUACCCCAACUGUUUAUACCGGCCUUUACCAAGCUCCAUCUUAAACUUCAGGGAACAACGAAUUGGUCGCUCUUGUAUUAGACAAGGGGCCGACCUUCCGUGCAAGACACUGACGCGCACGCGGUGUAAGAGAGUCCGAAUGCCUAAACAAUUUUGGACACUUGAUAGCCGUCAGCCGGCAUCCCCUAAUCCGGCGAGGCUCCCCUGUUUCUGGGCAAUUACAUACUGUGAGGUAGUGCUCAGGGGGACAUCAGCGGGAACACUUGAGGAUUGCAGUGGGUGCCAUAUGCAUCUUGCGCACGGCGGGAACAAGGUGAACGGCAGGUCCCAUUGGAAGAGUUACCGCAGGGACAGUUGCAACCGUUACAUGCAGUGGGUAAACAUUAACCCGUUAUCCCCUAGCGCGCCACUGCAUAAACCGCGUCGACGUCUAGAACGUCGCCGUGUAUACAAUGACGGCCGGAGACAACUGGGGGUACAGGUUGGUCGAGUCGGAACAUUGAGUCUGCACUAUUAUCUAAGGCAAGCUAAGGGUCUACACUGGUUUAAUUCUGCGGGCAGAUCUCUAGGUCAUAGGGAAUUUAAUCGCCCAGUAGAGCUAUCUUUGUCUGUGCAGAAUCAUCUUGGUGAACGUGCAAUGAAACGACACACCAACUGGCUAGUACGGCCAUGUCUAUCGCAUCCGGAUCGGUUUGGACUUGCGCUCACCCGGGGGCACCAGAUCACCUUGCUAGAUAAGGAUUACGAUUCGUCCACAAAAGCAUCAAUUCUGUCGAGCGCGCGACGACCUGCUGAAGCAGUAGCCUUCGUUAAAAUUUCCGACACACUCGUCAUGGCAAGACCACUAAUAUCAGCAGAACUCUGGUGCAUAACCUACUCUUCUUUCGAAUCAUAUGGCAUUCGCAAUCAGACUCAUGGAGCGACGGCAGAUGAGCUGAGUGAUCGUCUCAAGAACGUUUACCACCAUUACCAGAUCAUUUGUGGGAUGUAUGUGUUGUCCCUUACACAACUUGCAGCAGUAGCACGCGCCUGGACAGGCAGCAAAGAUAGCUUCUCAGCGCGGCACGCGCAGAGCCCGCCUGUUUUCUGGUCGCAUUUCAUAUUGUCGGUGCACCGAAUAGGCAAUCAAUUAUUAGACGCUACACGCGCCCGUCUUGGCGCGAAUAGGUGCGGAGUUGUAGGUAGGCUGAUAAGCGAUAGAAGAGGAUCACCUUAUCGGCACCGCGAUUCAGAAAUAGUUUCACACUCCGGUUGCAUUAUAAUAGUAGUUCGCUGUCGUAAGGGUUUCAAACUUCGCACUAGUGGACGACGUGGCAAAUCCAGCAAAAAGGGCGAAGACUGCGCGAGGGUCAUGGGCAACGAAGGGAUAGGCCAGGACCGUCAAAUCCGAUGUGCGUUGUGGCAUAUGUACUUGACUCGCAUUAACCCCGGUGGGAUCACCGCAGAAACAUUGCCGACGUCUUGCGUGAGUGGGGUUGAUGUGAAUCCCUGCGGACUUACUGUAUACUGUUUUUCCCUCGGCUUUCUAUUUAUAUUACGAGCAGGCAAAGUUCCCGCAAAUCACUUUUUCCUACUGCCGCCAGGCGAUUAUAGUUUCAAAGAAAAAUAUCGCGCUGAGAGCGAUGUGUACAGCGAGUACGUAGAGCUCUGCGUAGAAUGGUGCUGUGUACAGUCGGCCGUUCGUGAGAUGCACUUAUGUGAGUAUAAGUUCAUGAUGCUUGCCCGAACUCCACAUUACCCUAUCUGCGGGCUAUCUACCGGUUGGGUCGAUUACACAAGUGUUCGGGAGACUACCCCCGUCGACACACCCUUUCAAUUUUCACCGGGUGCGGAGGCGUUCGGGAUUUGUUUAAUUUGUCACCUGUUCUGGCAAAUAAGUCAAUCCAUACAUCAAGGGUACACGCCGACUUUCAAGCUGUCGAGGUUCACUCGCACCCGAAUUGAGCGCCUUGUAAUAUUUCUUUCGCGUGCCCUUUAUUAUUCAACACUUAUAGACACUGUAGGAAGGUGGGUCUCGGACCAAUGGACGAUCAUUUGUAUGGGUUGGUACGAGAAUUACAUCCUAUCGUUCCCAUGUCGACCAUUCGCGCUAGCUUACUAUAUUGUUAGUAGGAAUGGGAAAUGCAAGCCUAAAAGCACACGGGACCAGAUAACUCUUAAAGAACCAGUAACUCUGCCCGCAUUAGAGCCGUGGAAUGACGGUCUCACUCGCCAAUUGUGGGGUGAGAGCUUUGAGUCAUGUAUUACCAACCUAAGCAACUGGCUGAAGUGCGGGAUACGUAGUGCAUGUCACCCCCGGAUUGCACCCGACAGGGAGCUGCGACGCGGGUGCACUGUCCUCGCGAAUAGAGCAAUCUCGUUGAUGGGUCGGUCGACAUGCUUCUUUAGAUACACAAGUCUGUAUCCUGGACCCCGCGUCCCUCAAACACGCCUUUUUGCUAACAAAGAGGUUAUACGUCCUUCAGGUAGAUGUCUUCGAGUGCAUGUGUGGUUGUAUGUUUUGCCCACACGUUCUUGGCGACUGGGUGGAGUUGUUAUAUGUCGGUCGUUCAGAGAAGCAAGUAGGGGUAAGCCCAAAAAAUGUCUAUACGUUUUGGGGUUAGGUGGUUGCGCCGAACGAAUACUAGCAUCCCUAUUGCAUGAGAGUUCUGAGGACCUGCAAAAUCGAUCAAAACCGCACGGAAGGCAAUCCAGCAGUUUGUCGCAGUACUGGUCCAAGCCCUAUACGAGGCGUACCGACUUUCAUAAGCCAUUUAAUGAUCCUGGGGCCCUAAUUAUUUCCACUUCCCUAAUUGCGAGAGGGUACACGAUGCUACAAGGUGUGAUUGAAUGGUUCAUUAGCGUCGAAUUUCCCCCGACUAGAAAUGCAGCAGUAAUCUCCGUUGUCAUAUGGGGCCGGCCCGUAAAUAAAAUUUAUCGUGAAAUGGUGCGCAUGCGAUUUAAUGGCCGCACACCCCAUUCUGUACACUUACCGCCGCGACCCUAUGGAAUGGCGUACCUAGACUUUGUCAAUCCUCUCAGAUUUGAGACUAAACCCGCGUUGCGACUACGAUAUUGUCUCCUUAUGGAUCUAAAUUCUGCCACGUACGGCCUUAAUGCAGGUACACCAUGCAUACUUCUAACAAACCUUACGCGCGUCGCUAGGGUUCUGCUCUCGCUAUUUAAAUCGAGGCCAUCAAGAGUCUCAGAUGGGGUUAUACAUGAAAUUCAUAUGGAACUUGCCUUUAAAUGUACUCCCGACGCGAGCUAUGAGUAUUCUGAAAGAAUUAGUUCCCGUGUGAGGUGGACACCAUUACGACGCGGGGGGUCUGCGCGAGCGCUCCUGAGAAUCAUUGAUUUUGGUACUCUCCUCAGCGCAUGUCCGAGGAAUAUGUCGGGUGCGUCUCCCCCCAAAAAUUGA'

    protein = ''
    i=0
    while i< len(mRNA):
        protein += table[mRNA[i:i+3]]
        i += 3


    print(protein)

def countDNAcontent(dna):
    # return dna.count('A'), dna.count('C'), dna.count('G'), dna.count('T')
    C = {'A':0, 'C':0, 'G':0, 'T':0}
    for i in dna:
        C[i] += 1
    return C

def begin():
    # dna = ''.join([random.choice('ATCG') for _ in range(100)])
    # dna = 'CGTCGCTTCAAGTGTCTGGGTTCGTCTGAATGGGATTTAGCATGACCGCAAATGGCGGAATTGTTAAGGTGTTGTAGTTATATGATGCCCTCACGTCCTAGACAGGAGTCGCCTACAATTTTTGGCTACGTCCGCAATATTAGCTTGGACTCTACCTGGCTCCCCACGCAGAACTACGCAATGGCGTTTTGAACGGTTGCGCCAGAACGACAGCCCCCGTGCAAGTTACGTATTAGCCATGTGGCATTGTATCTACGCACGTCCATATCCCTTCGTAAAGGCCCTTAGCCATTAGGGAATCACACTTGGGCGATACGTCAGGTGCTGGTCCAAAGCCTGGTTGCACTAGATGGTCCAGGTTTGTACAATGCGTGCGAACGGAGACTCCTACGAATCGCGTGCATCTTTCATTAGACGGTATTGGAGAAAAAGGGGGCGCATTGGGTCCGTCCGATCAGGGTCCAATACGTGAGTCTTGAGATCAGGTTGCCGCGGGGGTTACCCGACAAAAGTGGAGGAAAAGGTATTTGTAGAGGAGCCCGTAGTGGAGGCCACCGGCGTTGTGGGCGTCGACTCGGGCATCGCAAGCACTGCCATTACGCTGCGCCTAATCGACTGTTTTCAGTTCAAGGCGATACTCATTACACTTCTCCGGATCTTCGCTAAGTGTGGTGGCCTGTAAGTGTAAGAGAAGGGCAGCCAACCGGCATTGAGCCCTCCAATGGCATGGTGGACGGAGCATTGTTCACCTAGCGCCTGTGCAGTCACTTCCAAACTTGAAGGCGTTTCTTACAACCTTTAACGTTGGCGTGAGACTTATATGCGACGCTGAGGT'
    # dna = 'GATATCGATCACATATCCCTATAATACATGAGAACTGATTCCCTAATATGACTGTCGGGACATGTACATCGGGACCTAGCTGTGTCAGCAGACCTTACGTTATTCTGGCGTTTGCTAAGTCATGCCGGACATCTTTCGCGAACCTGTTGGACTCTGTGTCACTCGGCCACAAGATACTCGATCCGGGAACTGGTGTAGATGAGGGTTGCCAGTTAATGAAAGCCGTCTTAGCAGAGTGAAGTACAGTGAATTGGCAGCGTAAGCGGTTATCCAACAGGAACCTCAAATGTCACTGCTTAGGGACACAACTGGTGGACGTTGGCAGTCAAAGCGGAGCTATTTCACTGCTGTAGTAGACCGTCAACTTGTGGATCATCAGATACTTCGACCTCATTTCAGTGTATTCACCTCGTAATTATCATGATGAACACAGCGTCTCCGAAGGCGCCCTATATCCTGGTGGAAAATTGAACTTTGGTCGGCCACACCGTACGGCCCAGGGATATAGATCCCCCACAAGAGAAAGTTCGGTCTCTACGGTAATGCTTAAATACTTCAAGAGGAGAAGATCACCGAACCATTCAGCAATATGTCATGAAGGCCGTTCATATGTTGGTCCGAAATTTACATTACAAGTACGCGGGCCCAGTAGCGTGCATGATCTCCCGTTACCCCGTCGTTCCGCTTGCCTAGCGATATGCAGCGGGGTGTAAGGTTCTGTTATGCTTTCGCCCCAGAGACACTACATACTTATGAGCTAGTCTAGCTAAAGGCATAACGATGGCCTCCGTATTCCATTACAGATATGCGGGCTTGCGTATGTCCCCGTGAGTGCAGCAGAGTACAGGGTTGAACGGAAAATTTAAGGCGAAATGTCCACCCCGCACCACGCTGGACCTGCCT'

    with open('/home/rafsanjani/Downloads/rosalind_dna(2).txt', 'r') as F:
        dna = next(F).strip()

    print(countDNAcontent(dna))
    # print(dna.count('A'))
    # print(dna.count('C'))
    # print(dna.count('G'))
    # print(dna.count('T'))

if __name__ == '__main__':
    # fiboRec(103)
    # print(c)
    # sequences()
    # print(fiboRec(100))
    # states()
    # hammingD()
    # mRNAtoProtein()
    # hmm()
    # from random import uniform, randint
    #
    # for i in range(0, 100):
    #     random.seed()
    #     print(randint(0, 8))
    # hmm()
    # begin()
    print(longestCommonPrefixes('ATC', 'ATCGGA'))
